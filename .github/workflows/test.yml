name: Run Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test-assets:
    name: Build & Test on ${{ matrix.os }} (${{ matrix.asset_name_suffix }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            asset_name_suffix: linux-x64
            vse_name: vse
            python-version: "3.9"
          - os: macos-latest
            asset_name_suffix: macos-arm64
            vse_name: vse
            python-version: "3.9"
          - os: windows-latest
            asset_name_suffix: windows-x64
            vse_name: vse.exe
            python-version: "3.9"
          - os: macos-13
            asset_name_suffix: macos-x64
            vse_name: vse
            python-version: "3.9"
          - os: ubuntu-22.04-arm
            asset_name_suffix: linux-arm64
            vse_name: vse
            python-version: "3.9"
          - os: windows-11-arm
            asset_name_suffix: windows-arm64
            vse_name: vse.exe
            python-version: "3.12" # Using a newer version as 3.9 is not available for Win ARM64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get version from Git tag
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      # --- Consolidated Build and Test for Linux  ---
      - name: Build and Test C++ Engine (Linux via Docker)
        if: runner.os == 'Linux'
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace \
            ubuntu:22.04 \
            bash -c "
              set -e
              apt-get update && apt-get install -y build-essential cmake git
              cd /workspace
              echo '--- Configuring CMake inside container ---'
              cmake -B build -DCMAKE_BUILD_TYPE=Release
              echo '--- Building project inside container ---'
              cmake --build build --config Release
              echo '--- Running C++ tests inside container ---'
              cd build
              ctest --verbose --output-on-failure
            "

      # --- Non-Linux Build Steps ---
      - name: Install C++ Build Tools (macOS)
        if: runner.os == 'macOS'
        run: brew uninstall cmake && brew untap local/pinned && brew install cmake

      - name: Configure CMake (macOS)
        if: runner.os == 'macOS'
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Configure CMake (Windows x64)
        if: matrix.asset_name_suffix == 'windows-x64'
        run: cmake -B build -G "Visual Studio 17 2022" -A x64

      - name: Configure CMake (Windows ARM64)
        if: matrix.asset_name_suffix == 'windows-arm64'
        run: cmake -B build -G "Visual Studio 17 2022" -A ARM64

      - name: Build CMake Project (non-Linux)
        if: runner.os != 'Linux'
        run: cmake --build build --config Release

      # --- Non-Linux Test Step ---
      - name: Run C++ Engine Tests (macOS & Windows)
        if: runner.os != 'Linux'
        shell: bash
        run: |
          cd build
          ctest --verbose --output-on-failure

      # --- Install Python dependencies and Run Compiler Tests ---
      - name: Install Python Dependencies & Run Tests
        shell: bash
        run: |
          pip install -e "./compiler[dev]"
          pytest compiler/tests/ -v
