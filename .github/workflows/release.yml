name: Create ValuaScript Release

on:
  push:
    tags: ["v*"]

permissions:
  id-token: write
  contents: write

jobs:
  build-and-release-assets:
    name: Build Release Assets on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            asset_name_suffix: linux-x64
            vse_name: vse
          - os: macos-latest
            asset_name_suffix: macos-arm64
            vse_name: vse
          - os: windows-latest
            asset_name_suffix: windows-x64
            vse_name: vse.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Setup Node.js
        if: runner.os == 'Linux'
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Get version from Git tag
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      # --- Build C++ Engine (vse) ---
      - name: Build C++ Engine (Linux via Docker)
        if: runner.os == 'Linux'
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace \
            ubuntu:22.04 \
            bash -c "
              set -e
              apt-get update && apt-get install -y build-essential cmake git
              cd /workspace
              echo '--- Configuring CMake inside container ---'
              cmake -B build -DCMAKE_BUILD_TYPE=Release
              echo '--- Building project inside container ---'
              cmake --build build --config Release
            "

      - name: Install C++ Build Tools (macOS)
        if: runner.os == 'macOS'
        run: brew install cmake

      - name: Configure CMake (macOS)
        if: runner.os == 'macOS'
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: cmake -B build -G "Visual Studio 17 2022" -A x64

      - name: Build CMake Project (non-Linux)
        if: runner.os != 'Linux'
        run: cmake --build build --config Release

      # --- Run C++ Engine Tests ---
      - name: Run Engine Tests (macOS)
        if: runner.os == 'macOS'
        run: ./build/bin/run_tests

      - name: Run C++ Engine Tests (Linux via Docker)
        if: runner.os == 'Linux'
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace \
            ubuntu:22.04 \
            bash -c "
              set -e
              echo '--- Running C++ tests inside container ---'
              ./build/bin/run_tests
            "

      - name: Run Engine Tests (Windows)
        if: runner.os == 'Windows'
        run: .\build\bin\Release\run_tests.exe

      # --- Install Python dependencies and Run Compiler Tests ---
      - name: Install Python Dependencies & Run Tests
        shell: bash
        run: |
          pip install pytest
          pip install -r compiler/requirements.txt
          pytest compiler/tests/
        env:
          PYTHONPATH: ${{ github.workspace }}/compiler

      - name: Create Engine Release Directory
        run: mkdir release_assets

      - name: Copy Engine to Release Directory (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: cp build/bin/Release/${{ matrix.vse_name }} release_assets/

      - name: Copy Engine to Release Directory (macOS/Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: cp build/bin/${{ matrix.vse_name }} release_assets/

      - name: Create Engine Zip Archive (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: Compress-Archive -Path release_assets\* -DestinationPath ValuaScript-Engine-v${{ env.RELEASE_VERSION }}-${{ matrix.asset_name_suffix }}.zip

      - name: Create Engine Zip Archive (macOS/Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd release_assets
          zip -r ../ValuaScript-Engine-v${{ env.RELEASE_VERSION }}-${{ matrix.asset_name_suffix }}.zip .

      # --- Package Python & VSCode Ext (ONCE, on Linux runner) ---
      - name: Build Python sdist and wheel for PyPI
        if: runner.os == 'Linux'
        run: |
          cp README.md compiler
          pip install build
          python -m build --outdir compiler/dist compiler
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION_FOR_VALUASCRIPT_COMPILER: ${{ env.RELEASE_VERSION }}

      - name: Package extension with vsce
        if: runner.os == 'Linux'
        run: |
          cd extension
          npm version ${{ env.RELEASE_VERSION }} --no-git-tag-version
          npm install
          npx vsce package -o ../valuascript-${{ env.RELEASE_VERSION }}.vsix

      # --- Upload all assets as artifacts ---
      - name: Upload Python Package Artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: compiler/dist

      - name: Upload VS Code Extension Artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: vsix-package
          path: valuascript-*.vsix

      - name: Upload Engine Zip Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-asset-${{ matrix.asset_name_suffix }}
          path: ValuaScript-Engine-v*.zip

  publish:
    name: Publish to PyPI and GitHub Releases
    needs: build-and-release-assets
    runs-on: ubuntu-latest
    steps:
      - name: Get version from Git tag
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish Python package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: artifacts/python-package

      - name: Create GitHub Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          name: ValuaScript v${{ env.RELEASE_VERSION }}
          files: |
            artifacts/release-asset-linux-x64/*.zip
            artifacts/release-asset-macos-arm64/*.zip
            artifacts/release-asset-windows-x64/*.zip
            artifacts/vsix-package/*.vsix
          body: |
            Official release of the ValuaScript toolchain.
            See the README for installation instructions.
