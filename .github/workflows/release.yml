name: Create ValuaScript Release

on:
  push:
    tags: ["v*"]

permissions:
  contents: write

jobs:
  build-and-package:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            asset_name_suffix: linux-x64
            vse_path_in_build: build/bin/vse
            vse_name: vse
            vsc_name: vsc
          - os: macos-latest
            asset_name_suffix: macos-arm64
            vse_path_in_build: build/bin/vse
            vse_name: vse
            vsc_name: vsc
          - os: windows-latest
            asset_name_suffix: windows-x64
            vse_path_in_build: build/bin/vse.exe
            vse_name: vse.exe
            vsc_name: vsc.exe

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Get version from Git tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      # --- Build C++ Engine (vse) ---
      - name: Install C++ Build Tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake

      - name: Install C++ Build Tools (macOS)
        if: runner.os == 'macOS'
        run: brew install cmake

      - name: Install Build Tools (Windows)
        if: runner.os == 'Windows'
        run: choco install zip

      - name: Configure CMake (Linux/macOS)
        if: runner.os != 'Windows'
        run: cmake -B build

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: cmake -B build -G "Ninja"

      - name: Build CMake Project
        run: cmake --build build --config Release

      # --- Run C++ Engine Tests ---
      - name: Run Engine Tests (Linux/macOS)
        if: runner.os != 'Windows'
        run: ./build/bin/run_tests

      - name: Run Engine Tests (Windows)
        if: runner.os == 'Windows'
        run: .\build\bin\run_tests.exe

      # --- Install Python dependencies and Run Compiler Tests ---
      - name: Install Python Dependencies & Run Tests
        run: |
          pip install pytest
          pip install -r compiler/requirements.txt
          pytest compiler/tests/
        env:
          PYTHONPATH: ${{ github.workspace }}/compiler

      # --- Package VS Code Extension (.vsix) ---
      - name: Package extension with vsce
        shell: bash
        run: |
          cd extension
          npm install
          npx vsce package -o ../valuascript-${{ env.RELEASE_VERSION }}.vsix

      - name: Build Python sdist and wheel for PyPI
        if: runner.os == 'Linux' # Only need to build this once
        run: |
          cp README.md compiler
          pip install build
          python -m build compiler

      - name: Upload Python Package Artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: compiler/dist

      # --- Bundle all assets into a Zip file ---
      - name: Create release directory
        run: mkdir release_assets

      - name: Copy assets to release directory
        shell: bash
        run: |
          # Copy the executable and the vsix
          mv ${{ matrix.vse_path_in_build }} release_assets/${{ matrix.vse_name }}
          mv valuascript-${{ env.RELEASE_VERSION }}.vsix release_assets/

          # Copy the template README and replace the version placeholder
          sed "s/{VERSION}/${{ env.RELEASE_VERSION }}/g" .github/workflows/README_RELEASE.md > release_assets/README.md

      - name: Create Zip archive
        shell: bash
        run: |
          cd release_assets
          zip -r ../ValuaScript-v${{ env.RELEASE_VERSION }}-${{ matrix.asset_name_suffix }}.zip .
          cd ..

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: valuascript-release-${{ matrix.asset_name_suffix }}
          path: ValuaScript-v*.zip

  publish:
    name: Publish to PyPI and GitHub Releases
    needs: build-and-package
    runs-on: ubuntu-latest

    permissions:
      # This is the permission required for PyPI trusted publishing
      id-token: write
      # This permission is for creating the GitHub Release
      contents: write

    steps:
      - name: Get version from Git tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Download all artifacts from build job
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download everything into an 'artifacts' folder

      - name: Publish Python package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          # This finds the package inside the downloaded artifact folder
          packages_dir: artifacts/python-package

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          name: ValuaScript v${{ env.RELEASE_VERSION }}
          files: artifacts/**/*.zip
          body: |
            ## ValuaScript v${{ env.RELEASE_VERSION }}
            This is the official release of the ValuaScript toolchain.
            **Assets:**
            - `ValuaScript-v${{ env.RELEASE_VERSION }}-linux-x64.zip`
            - `ValuaScript-v${{ env.RELEASE_VERSION }}-macos-arm64.zip`
            - `ValuaScript-v${{ env.RELEASE_VERSION }}-windows-x64.zip`
            Each zip file contains:
            - `vse`: The ValuaScript simulation engine.
            - `valuascript-*.vsix`: The VS Code extension.
