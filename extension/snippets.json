{
  "let statement": {
    "prefix": "let",
    "body": ["let ${1:variable_name} = ${2:value}"],
    "description": "Declare a new variable"
  },
  "func statement": {
    "prefix": "func",
    "body": [
      "func ${1:function_name}(${2:param}: ${3:type}) -> ${4:return_type} {",
      "\t\"\"\"${5:Documentation...}\"\"\"",
      "\treturn ${6:value}",
      "}"
    ],
    "description": "Declare a new function"
  },
  "if/then/else expression": {
    "prefix": "if",
    "body": [
      "if ${1:condition} then ${2:value_if_true} else ${3:value_if_false}"
    ],
    "description": "A conditional if/then/else expression"
  },
  "@iterations directive": {
    "prefix": "@iterations",
    "body": ["@iterations = ${1:10000}"],
    "description": "Set the number of simulation trials"
  },
  "@module directive": {
    "prefix": "@module",
    "body": ["@module"],
    "description": "Set the current file as a module"
  },
  "@import directive": {
    "prefix": "@import",
    "body": ["@import \"${1:}\""],
    "description": "Imports a module file into the current one"
  },
  "@output directive": {
    "prefix": "@output",
    "body": ["@output = ${1:result_variable}"],
    "description": "Set the final output variable"
  },
  "@output_file directive": {
    "prefix": "@output_file",
    "body": ["@output_file = \"${1:results.csv}\""],
    "description": "Set the path for the CSV output file"
  },
  "Normal Distribution": {
    "prefix": "normal",
    "body": ["Normal(${1:mean}, ${2:std_dev})"],
    "description": "Normal(mean, std_dev)"
  },
  "Pert Distribution": {
    "prefix": "pert",
    "body": ["Pert(${1:min}, ${2:most_likely}, ${3:max})"],
    "description": "Pert(min, most_likely, max)"
  },
  "Lognormal Distribution": {
    "prefix": "lognormal",
    "body": ["Lognormal(${1:log_mean}, ${2:log_std_dev})"],
    "description": "Lognormal(log_mean, log_std_dev)"
  },
  "Uniform Distribution": {
    "prefix": "uniform",
    "body": ["Uniform(${1:min}, ${2:max})"],
    "description": "Uniform(min, max)"
  },
  "Triangular Distribution": {
    "prefix": "triangular",
    "body": ["Triangular(${1:min}, ${2:most_likely}, ${3:max})"],
    "description": "Triangular(min, most_likely, max)"
  },
  "Beta Distribution": {
    "prefix": "beta",
    "body": ["Beta(${1:alpha}, ${2:beta})"],
    "description": "Beta(alpha, beta)"
  },
  "Bernoulli Distribution": {
    "prefix": "bernoulli",
    "body": ["Bernoulli(${1:p})"],
    "description": "Bernoulli(p)"
  },
  "GrowSerie": {
    "prefix": "GrowSerie",
    "body": ["GrowSerie(${1:base_value}, ${2:growth_rate}, ${3:periods})"],
    "description": "GrowSerie(base_value, growth_rate, periods)"
  },
  "CompoundSerie": {
    "prefix": "CompoundSerie",
    "body": ["CompoundSerie(${1:base_value}, ${2:rates_vector})"],
    "description": "CompoundSerie(base_value, rates_vector)"
  },
  "InterpolateSerie": {
    "prefix": "InterpolateSerie",
    "body": [
      "InterpolateSerie(${1:start_value}, ${2:end_value}, ${3:periods})"
    ],
    "description": "InterpolateSerie(start_value, end_value, periods)"
  },
  "SumVector": {
    "prefix": "SumVector",
    "body": ["SumVector(${1:vector})"],
    "description": "SumVector(vector)"
  },
  "VectorDelta": {
    "prefix": "VectorDelta",
    "body": ["VectorDelta(${1:vector})"],
    "description": "VectorDelta(vector)"
  },
  "Npv": {
    "prefix": "Npv",
    "body": ["Npv(${1:rate}, ${2:cashflows_vector})"],
    "description": "Npv(rate, cashflows_vector)"
  },
  "GetElement": {
    "prefix": "GetElement",
    "body": ["GetElement(${1:vector}, ${2:index})"],
    "description": "GetElement(vector, index)"
  },
  "DeleteElement": {
    "prefix": "DeleteElement",
    "body": ["DeleteElement(${1:vector}, ${2:index})"],
    "description": "DeleteElement(vector, index)"
  },
  "ComposeVector": {
    "prefix": "ComposeVector",
    "body": ["ComposeVector(${1:value1}, ${2:value2})"],
    "description": "ComposeVector(value1, value2, ...)"
  },
  "CapitalizeExpenses": {
    "prefix": "CapitalizeExpenses",
    "body": [
      "CapitalizeExpenses(${1:current_expense}, ${2:past_expenses_vector}, ${3:amortization_period})"
    ],
    "description": "CapitalizeExpenses(current_expense, past_expenses_vector, amortization_period)"
  },
  "log": {
    "prefix": "log",
    "body": ["log(${1:value})"],
    "description": "log(value)"
  },
  "log10": {
    "prefix": "log10",
    "body": ["log10(${1:value})"],
    "description": "log10(value)"
  },
  "exp": {
    "prefix": "exp",
    "body": ["exp(${1:value})"],
    "description": "exp(value)"
  },
  "sin": {
    "prefix": "sin",
    "body": ["sin(${1:value})"],
    "description": "sin(value)"
  },
  "cos": {
    "prefix": "cos",
    "body": ["cos(${1:value})"],
    "description": "cos(value)"
  },
  "tan": {
    "prefix": "tan",
    "body": ["tan(${1:value})"],
    "description": "tan(value)"
  },
  "ReadCsvVector": {
    "prefix": "ReadCsvVector",
    "body": ["ReadCsvVector(\"${1:file.csv}\", \"${2:column_name}\")"],
    "description": "ReadCsvVector(\"file.csv\", \"column_name\")"
  },
  "ReadCsvScalar": {
    "prefix": "ReadCsvScalar",
    "body": [
      "ReadCsvScalar(\"${1:file.csv}\", \"${2:column_name}\", ${3:row_index})"
    ],
    "description": "ReadCsvScalar(\"file.csv\", \"column_name\", row_index)"
  }
}
